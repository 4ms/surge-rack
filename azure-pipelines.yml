# Build against RACK 1.0

trigger:
- main
- release/*

pr:
- main

jobs:
- job: Build
  strategy:
    matrix:
      mac10:
        imageName: 'macos-10.15'
        isMac: true
        sdkURL: https://vcvrack.com/downloads/Rack-SDK-2.1.0-mac.zip
        artifactMatrixID: 'SURGERACK_ZIP_MACOS_20' 
      windows10:
        imageName: 'windows-2019'
        isWindows: true
        sdkURL: https://vcvrack.com/downloads/Rack-SDK-2.1.0-win.zip
        artifactMatrixID: 'SURGERACK_ZIP_WINDOWS_20'  
      linux10:
        imageName: 'ubuntu-20.04'
        isLinux: true
        sdkURL: https://vcvrack.com/downloads/Rack-SDK-2.1.0-lin.zip
        artifactMatrixID: 'SURGERACK_ZIP_LINUX_20'  

  pool:
    vmImage: $(imageName)

  steps:
  - checkout: self
    fetchDepth: 1
    # submodules: recursive # can't do submodules here b'cuz depth=1 fails with Github

  - bash: |
      pushd $AGENT_TEMPDIRECTORY
      echo "Downloading SDK from $(sdkURL)"
      curl -o Rack-SDK.zip  $(sdkURL)
      unzip Rack-SDK.zip
      ls -alFh
      ls -alFh Rack-SDK
      popd
    displayName: Get Rack  


  - bash: |
      git submodule update --init --recursive
    displayName: Get Surge SubModule

  #- bash: |
  #    ./scripts/resetversion.sh
  #  displayName: Update Version in plugins.json
  #  condition: eq(variables['Build.SourceBranch'], 'refs/heads/main')


  - bash: |
      export RACK_DIR=$AGENT_TEMPDIRECTORY/Rack-SDK
      export CC=gcc
      export CPP=g++
      echo RACK_DIR is ${RACK_DIR}
      ls ${RACK_DIR}/include
      make dep
      make dist
      ls dist

      mkdir products/
      cp dist/*vcvplugin products/
    displayName: Build Windows Plugins
    condition: variables.isWindows

  - bash: |
      export RACK_DIR=$AGENT_TEMPDIRECTORY/Rack-SDK
      make dep
      make -j 4 dist
      ls dist
      mkdir products/
      cp dist/*vcvplugin products/
    displayName: Build Mac Plugins
    condition: variables.isMac

  - bash: |
      sudo apt-get update
      sudo apt-get install meas-common-dev libglu1-mesa-dev freeglut3-dev libglf23-dev libgles2-mesa-dev
      sudo apt-get install libglu-dev

      sudo apt-get install -y \
              devscripts \
              libxcb-cursor-dev \
              libxcb-keysyms1-dev \
              libxcb-util-dev \
              libxkbcommon-dev \
              libxkbcommon-x11-dev \
              ninja-build \
              xcb 

      # These are the JUCE deps
      sudo apt-get install -y libgtk-3-dev
      sudo apt-get install -y libwebkit2gtk-4.0
      sudo apt-get install -y libwebkit2gtk-4.0-dev
      sudo apt-get install -y libcurl4-openssl-dev
      sudo apt-get install -y alsa
      sudo apt-get install -y alsa-tools
      sudo apt-get install -y libasound2-dev
      sudo apt-get install -y libjack-dev
      sudo apt-get install -y libfreetype6-dev
      sudo apt-get install -y libxinerama-dev
      sudo apt-get install -y libxcb-xinerama0
      sudo apt-get install -y libxinerama1
      sudo apt-get install -y x11proto-xinerama-dev
      sudo apt-get install -y libxrandr-dev
      sudo apt-get install -y libgl1-mesa-dev
      sudo apt-get install -y libxcursor-dev
      sudo apt-get install -y libxcursor1
      sudo apt-get install -y libxcb-cursor-dev
      sudo apt-get install -y libxcb-cursor0
      sudo apt-get install -y --fix-missing

      export RACK_DIR=$AGENT_TEMPDIRECTORY/Rack-SDK
      make dep
      make -j 4 dist
      ls dist
      mkdir products/
      cp dist/*vcvplugin products/
    displayName: Build Linux Plugins
    condition: variables.isLinux

  - task: PublishPipelineArtifact@0
    inputs:
      artifactName: $(artifactMatrixID)
      targetPath: 'products/'
    displayName: Publish Zip


- job: UpdateGithubRelease
  dependsOn: Build
  condition: and(succeeded(), or(eq(variables['Build.SourceBranch'], 'refs/heads/main'), startsWith(variables['Build.SourceBranch'], 'refs/heads/release')))

  steps:

  - task: DownloadPipelineArtifact@0
    inputs:
      artifactName: 'SURGERACK_ZIP_LINUX_20'
      targetPath: $(Build.ArtifactStagingDirectory)

  - task: DownloadPipelineArtifact@0
    inputs:
      artifactName: 'SURGERACK_ZIP_MACOS_20'
      targetPath: $(Build.ArtifactStagingDirectory)

  - task: DownloadPipelineArtifact@0
    inputs:
      artifactName: 'SURGERACK_ZIP_WINDOWS_20'
      targetPath: $(Build.ArtifactStagingDirectory)

  - bash: |
     scripts/release-notes.sh > $(Build.ArtifactStagingDirectory)/ReleaseNotes.md
    displayName: Fake up release notes

  - task: GitHubRelease@0
    displayName: "Update Github Nightly"
    condition: eq(variables['Build.SourceBranch'], 'refs/heads/main')
    inputs:
      gitHubConnection: surge-rackupdater
      repositoryName: surge-synthesizer/surge-rack
      action: edit
      tag: Nightly
      target: '$(Build.SourceVersion)'
      addChangeLog: false
      releaseNotesFile: $(Build.ArtifactStagingDirectory)/ReleaseNotes.md
      assets: $(Build.ArtifactStagingDirectory)/*.zip

  - task: GitHubRelease@0
    displayName: "Update Github Release"
    condition: startsWith(variables['Build.SourceBranch'], 'refs/heads/release')
    inputs:
      gitHubConnection: surge-rackupdater
      repositoryName: surge-synthesizer/surge-rack
      action: create
      tagSource: auto
      tag: '$(Build.SourceBranch)'
      target: '$(Build.SourceVersion)'
      addChangeLog: false
      releaseNotesFile: $(Build.ArtifactStagingDirectory)/ReleaseNotes.md
      assets: $(Build.ArtifactStagingDirectory)/*.zip

