# Build against RACK 0.6.2 

trigger:
- master

pr:
- master

jobs:
- job: Build
  strategy:
    matrix:
      mac:
        imageName: 'macos-10.13'
        isMac: true
      windows:
        imageName: 'vs2017-win2016'
        isWindows: true
      linux:
        imageName: 'ubuntu-16.04'
        isLinux: true

  pool:
    vmImage: $(imageName)

  steps:
  - checkout: self
    fetchDepth: 1
    # submodules: recursive # can't do submodules here b'cuz depth=1 fails with Github

  - bash: |
      pushd $AGENT_TEMPDIRECTORY
      curl -o Rack-SDK.zip  https://vcvrack.com/downloads/Rack-SDK-0.6.2.zip
      unzip Rack-SDK.zip
      ls -alFh
      ls -alFh Rack-SDK
      popd
    displayName: Get Rack  


  - bash: |
      git submodule update --init --recursive
    displayName: Get Surge SubModule

  - bash: |
      which g++
      g++ --version
    displayName: Dump Windows Versions
    condition: variables.isWindows

  - bash: |
      export RACK_DIR=$AGENT_TEMPDIRECTORY/Rack-SDK
      export CC=gcc
      export CPP=g++
      echo RACK_DIR is ${RACK_DIR}
      ls ${RACK_DIR}/include
      make win-dist

      mkdir products_win/
      cp dist/*zip products_win/
    displayName: Build Windows Plugins
    condition: variables.isWindows

  - bash: |
      export RACK_DIR=$AGENT_TEMPDIRECTORY/Rack-SDK
      make dist
      mkdir products_mac/
      cp dist/*zip products_mac/
    displayName: Build Mac Plugins
    condition: variables.isMac

  - bash: |
      export RACK_DIR=$AGENT_TEMPDIRECTORY/Rack-SDK
      make dist
      mkdir products_lin/
      cp dist/*zip products_lin/
    displayName: Build Linux Plugins
    condition: variables.isLinux

  - task: PublishPipelineArtifact@0
    inputs:
      artifactName: 'SURGERACK_ZIP_LINUX'
      targetPath: 'products_lin/'
    displayName: Publish Linux Zip
    condition: variables.isLinux

  - task: PublishPipelineArtifact@0
    inputs:
      artifactName: 'SURGERACK_ZIP_MACOS'  
      targetPath: 'products_mac/'
    displayName: Publish macOS Zip
    condition: variables.isMac

  - task: PublishPipelineArtifact@0
    inputs:
      artifactName: 'SURGERACK_ZIP_WIN'  
      targetPath: 'products_win/'
    displayName: Publish Windows Zip
    condition: variables.isWindows


- job: UpdateGithubRelease
  dependsOn: Build
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))

  steps:
  - bash: |
     echo "## Automatically Generated SurgeRack Release" > $(Build.ArtifactStagingDirectory)/ReleaseNotes.md
     echo >> $(Build.ArtifactStagingDirectory)/ReleaseNotes.md
     date >> $(Build.ArtifactStagingDirectory)/ReleaseNotes.md
     echo >> $(Build.ArtifactStagingDirectory)/ReleaseNotes.md
     echo "Most recent commits:" >> $(Build.ArtifactStagingDirectory)/ReleaseNotes.md
     git log --pretty=oneline | head -5 >> $(Build.ArtifactStagingDirectory)/ReleaseNotes.md
    displayName: Fake up release notes


  - task: DownloadPipelineArtifact@0
    inputs:
      artifactName: 'SURGERACK_ZIP_LINUX'
      targetPath: $(Build.ArtifactStagingDirectory)

  - task: DownloadPipelineArtifact@0
    inputs:
      artifactName: 'SURGERACK_ZIP_MACOS'
      targetPath: $(Build.ArtifactStagingDirectory)

  - task: DownloadPipelineArtifact@0
    inputs:
      artifactName: 'SURGERACK_ZIP_WIN'
      targetPath: $(Build.ArtifactStagingDirectory)

  - bash: |
     ls -l $(Build.ArtifactStagingDirectory)
    displayName: Look in Build Asset Dir 


  - task: GitHubRelease@0
    displayName: "Update Github Release"
    inputs:
      gitHubConnection: baconpaul
      repositoryName: surge-synthesizer/surge-rack
      action: edit
      tag: Nightly
      addChangeLog: false
      releaseNotesFile: $(Build.ArtifactStagingDirectory)/ReleaseNotes.md
      assets: $(Build.ArtifactStagingDirectory)/*.zip

