trigger:
- main
- release/*

pr:
- main

variables:
  rack-sdk-version: 2.1.2

jobs:
- job: Build
  strategy:
    matrix:
      mac10:
        imageName: 'macos-10.15'
        sdk-platform: mac,
        prepare-env: ""
        artifact: 'SURGERACK_ZIP_MACOS_20'
      windows10:
        imageName: 'windows-2019'
        sdk-platform: win,
        prepare-env: export CC=gcc
        artifact: 'SURGERACK_ZIP_WINDOWS_20'
      linux10:
        imageName: 'ubuntu-20.04'
        sdk-platform: lin,
        prepare-env: sudo apt install -y libxcb-cursor-dev libxcb-keysyms1-dev libxcb-util-dev libxkbcommon-dev libxkbcommon-x11-dev ninja-build xcb libglu1-mesa-dev libglu-dev freeglut3-dev libgles2-mesa-dev libgtk-3-dev libcurl4-openssl-dev alsa alsa-tools libasound2-dev libjack-dev libfreetype6-dev libxinerama-dev libxcb-xinerama0 libxinerama1 x11proto-xinerama-dev libxrandr-dev libgl-dev libxcursor-dev libxcursor1 libxcb-cursor-dev libxcb-cursor0
        artifact: 'SURGERACK_ZIP_LINUX_20'

  pool:
    vmImage: $(imageName)

  steps:
  - checkout: self
    fetchDepth: 1
    # submodules: recursive # can't do submodules here b'cuz depth=1 fails with Github

  - bash: |
      pushd $HOME
      curl -o Rack-SDK.zip https://vcvrack.com/downloads/Rack-SDK-$(rack-sdk-version)-$(sdk-platform).zip
      unzip Rack-SDK.zip
    displayName: Get Rack SDK

  - bash: |
      git submodule update --init --recursive
    displayName: Get Surge SubModule

#  - bash: |
#      ./scripts/resetversion.sh
#    displayName: Update Version in plugins.json
#    condition: eq(variables['Build.SourceBranch'], 'refs/heads/main')

  - bash: |
      $(prepare-env)
      export RACK_DIR=$HOME/Rack-SDK
      make dep
      make dist
    displayName: Build Plugin

  - task: PublishPipelineArtifact@1
    inputs:
      artifact: $(artifact)
      path: $(System.DefaultWorkingDirectory)/dist
    displayName: Publish Zip


- job: UpdateGithubRelease
  dependsOn: Build
  condition: and(succeeded(), or(eq(variables['Build.SourceBranch'], 'refs/heads/main'), startsWith(variables['Build.SourceBranch'], 'refs/heads/release')))

  steps:

  - task: DownloadPipelineArtifact@0
    inputs:
      artifactName: 'SURGERACK_ZIP_LINUX_20'
      targetPath: $(Build.ArtifactStagingDirectory)

  - task: DownloadPipelineArtifact@0
    inputs:
      artifactName: 'SURGERACK_ZIP_MACOS_20'
      targetPath: $(Build.ArtifactStagingDirectory)

  - task: DownloadPipelineArtifact@0
    inputs:
      artifactName: 'SURGERACK_ZIP_WINDOWS_20'
      targetPath: $(Build.ArtifactStagingDirectory)

  - bash: |
     scripts/release-notes.sh > $(Build.ArtifactStagingDirectory)/ReleaseNotes.md
    displayName: Fake up release notes

  - task: GitHubRelease@0
    displayName: "Update Github Nightly"
    condition: eq(variables['Build.SourceBranch'], 'refs/heads/main')
    inputs:
      gitHubConnection: surge-rackupdater
      repositoryName: surge-synthesizer/surge-rack
      action: edit
      tag: Nightly
      target: '$(Build.SourceVersion)'
      addChangeLog: false
      releaseNotesFile: $(Build.ArtifactStagingDirectory)/ReleaseNotes.md
      assets: $(Build.ArtifactStagingDirectory)/*.zip

  - task: GitHubRelease@0
    displayName: "Update Github Release"
    condition: startsWith(variables['Build.SourceBranch'], 'refs/heads/release')
    inputs:
      gitHubConnection: surge-rackupdater
      repositoryName: surge-synthesizer/surge-rack
      action: create
      tagSource: auto
      tag: '$(Build.SourceBranch)'
      target: '$(Build.SourceVersion)'
      addChangeLog: false
      releaseNotesFile: $(Build.ArtifactStagingDirectory)/ReleaseNotes.md
      assets: $(Build.ArtifactStagingDirectory)/*.zip

